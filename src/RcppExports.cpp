// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// colpath
Eigen::VectorXd colpath(const Eigen::MatrixXd m, const Eigen::VectorXi v, const int offset);
RcppExport SEXP _gotm_colpath(SEXP mSEXP, SEXP vSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(colpath(m, v, offset));
    return rcpp_result_gen;
END_RCPP
}
// extract_elements
Eigen::VectorXd extract_elements(const Eigen::VectorXi x, const int offset, const Eigen::VectorXd v);
RcppExport SEXP _gotm_extract_elements(SEXP xSEXP, SEXP offsetSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_elements(x, offset, v));
    return rcpp_result_gen;
END_RCPP
}
// ind_reg_thresh
Eigen::MatrixXd ind_reg_thresh(const Eigen::MatrixXd thresh_mm, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma);
RcppExport SEXP _gotm_ind_reg_thresh(SEXP thresh_mmSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_reg_thresh(thresh_mm, thresh_lambda, thresh_gamma));
    return rcpp_result_gen;
END_RCPP
}
// getThresholds
Eigen::MatrixXd getThresholds(const Eigen::MatrixXd thresh_mm, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma, const int thresh_no_cov, const int thresh_method, const int thresh_func, const int use_alpha, const double alpha_0);
RcppExport SEXP _gotm_getThresholds(SEXP thresh_mmSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP, SEXP thresh_no_covSEXP, SEXP thresh_methodSEXP, SEXP thresh_funcSEXP, SEXP use_alphaSEXP, SEXP alpha_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_method(thresh_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_func(thresh_funcSEXP);
    Rcpp::traits::input_parameter< const int >::type use_alpha(use_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    rcpp_result_gen = Rcpp::wrap(getThresholds(thresh_mm, thresh_lambda, thresh_gamma, thresh_no_cov, thresh_method, thresh_func, use_alpha, alpha_0));
    return rcpp_result_gen;
END_RCPP
}
// LLFunc
double LLFunc(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::VectorXi parcount, const int link, const int thresh_no_cov, const int thresh_method, const int thresh_func, const int use_alpha, const double alpha_0, const int negative, const int use_weights, const Eigen::VectorXd weights);
RcppExport SEXP _gotm_LLFunc(SEXP parametersSEXP, SEXP yiSEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP parcountSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP thresh_methodSEXP, SEXP thresh_funcSEXP, SEXP use_alphaSEXP, SEXP alpha_0SEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_method(thresh_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_func(thresh_funcSEXP);
    Rcpp::traits::input_parameter< const int >::type use_alpha(use_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(LLFunc(parameters, yi, reg_mm, thresh_mm, parcount, link, thresh_no_cov, thresh_method, thresh_func, use_alpha, alpha_0, negative, use_weights, weights));
    return rcpp_result_gen;
END_RCPP
}
// LLFuncIndv
Eigen::MatrixXd LLFuncIndv(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::VectorXi parcount, const int link, const int thresh_no_cov, const int thresh_method, const int thresh_func, const int use_alpha, const double alpha_0, const int negative, const int use_weights, const Eigen::VectorXd weights);
RcppExport SEXP _gotm_LLFuncIndv(SEXP parametersSEXP, SEXP yiSEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP parcountSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP thresh_methodSEXP, SEXP thresh_funcSEXP, SEXP use_alphaSEXP, SEXP alpha_0SEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_method(thresh_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_func(thresh_funcSEXP);
    Rcpp::traits::input_parameter< const int >::type use_alpha(use_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(LLFuncIndv(parameters, yi, reg_mm, thresh_mm, parcount, link, thresh_no_cov, thresh_method, thresh_func, use_alpha, alpha_0, negative, use_weights, weights));
    return rcpp_result_gen;
END_RCPP
}
// LLGradFunc
Eigen::MatrixXd LLGradFunc(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd YYY1, const Eigen::MatrixXd YYY2, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::MatrixXd thresh_extd, const Eigen::VectorXi parcount, const int link, const int thresh_no_cov, const int thresh_method, const int thresh_func, const int use_alpha, const double alpha_0, const int negative, const int use_weights, const Eigen::VectorXd weights);
RcppExport SEXP _gotm_LLGradFunc(SEXP parametersSEXP, SEXP yiSEXP, SEXP YYY1SEXP, SEXP YYY2SEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP thresh_extdSEXP, SEXP parcountSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP thresh_methodSEXP, SEXP thresh_funcSEXP, SEXP use_alphaSEXP, SEXP alpha_0SEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY1(YYY1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY2(YYY2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_extd(thresh_extdSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_method(thresh_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_func(thresh_funcSEXP);
    Rcpp::traits::input_parameter< const int >::type use_alpha(use_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(LLGradFunc(parameters, yi, YYY1, YYY2, reg_mm, thresh_mm, thresh_extd, parcount, link, thresh_no_cov, thresh_method, thresh_func, use_alpha, alpha_0, negative, use_weights, weights));
    return rcpp_result_gen;
END_RCPP
}
// LLGradFuncIndv
Eigen::MatrixXd LLGradFuncIndv(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd YYY1, const Eigen::MatrixXd YYY2, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::MatrixXd thresh_extd, const Eigen::VectorXi parcount, const int link, const int thresh_no_cov, const int thresh_method, const int thresh_func, const int use_alpha, const double alpha_0, const int negative, const int use_weights, const Eigen::VectorXd weights);
RcppExport SEXP _gotm_LLGradFuncIndv(SEXP parametersSEXP, SEXP yiSEXP, SEXP YYY1SEXP, SEXP YYY2SEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP thresh_extdSEXP, SEXP parcountSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP thresh_methodSEXP, SEXP thresh_funcSEXP, SEXP use_alphaSEXP, SEXP alpha_0SEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY1(YYY1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY2(YYY2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_extd(thresh_extdSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_method(thresh_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_func(thresh_funcSEXP);
    Rcpp::traits::input_parameter< const int >::type use_alpha(use_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(LLGradFuncIndv(parameters, yi, YYY1, YYY2, reg_mm, thresh_mm, thresh_extd, parcount, link, thresh_no_cov, thresh_method, thresh_func, use_alpha, alpha_0, negative, use_weights, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gotm_colpath", (DL_FUNC) &_gotm_colpath, 3},
    {"_gotm_extract_elements", (DL_FUNC) &_gotm_extract_elements, 3},
    {"_gotm_ind_reg_thresh", (DL_FUNC) &_gotm_ind_reg_thresh, 3},
    {"_gotm_getThresholds", (DL_FUNC) &_gotm_getThresholds, 8},
    {"_gotm_LLFunc", (DL_FUNC) &_gotm_LLFunc, 14},
    {"_gotm_LLFuncIndv", (DL_FUNC) &_gotm_LLFuncIndv, 14},
    {"_gotm_LLGradFunc", (DL_FUNC) &_gotm_LLGradFunc, 17},
    {"_gotm_LLGradFuncIndv", (DL_FUNC) &_gotm_LLGradFuncIndv, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_gotm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
