// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// pstdnorm
Eigen::VectorXd pstdnorm(const Eigen::VectorXd v);
RcppExport SEXP _hopit_pstdnorm(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(pstdnorm(v));
    return rcpp_result_gen;
END_RCPP
}
// dstdnorm
Eigen::VectorXd dstdnorm(const Eigen::VectorXd v);
RcppExport SEXP _hopit_dstdnorm(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(dstdnorm(v));
    return rcpp_result_gen;
END_RCPP
}
// dstdlogis
Eigen::VectorXd dstdlogis(const Eigen::VectorXd v);
RcppExport SEXP _hopit_dstdlogis(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(dstdlogis(v));
    return rcpp_result_gen;
END_RCPP
}
// pstdlogis
Eigen::VectorXd pstdlogis(const Eigen::VectorXd v);
RcppExport SEXP _hopit_pstdlogis(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(pstdlogis(v));
    return rcpp_result_gen;
END_RCPP
}
// colpath
Eigen::VectorXd colpath(const Eigen::MatrixXd m, const Eigen::VectorXi v, const int offset);
RcppExport SEXP _hopit_colpath(SEXP mSEXP, SEXP vSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type v(vSEXP);
    Rcpp::traits::input_parameter< const int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(colpath(m, v, offset));
    return rcpp_result_gen;
END_RCPP
}
// glm2hopit
SEXP glm2hopit(const Eigen::VectorXd reg_params, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma, const int thresh_1_exp);
RcppExport SEXP _hopit_glm2hopit(SEXP reg_paramsSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP, SEXP thresh_1_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type reg_params(reg_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    rcpp_result_gen = Rcpp::wrap(glm2hopit(reg_params, thresh_lambda, thresh_gamma, thresh_1_exp));
    return rcpp_result_gen;
END_RCPP
}
// ind_reg_thresh
Eigen::MatrixXd ind_reg_thresh(const Eigen::MatrixXd thresh_mm, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma);
RcppExport SEXP _hopit_ind_reg_thresh(SEXP thresh_mmSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_reg_thresh(thresh_mm, thresh_lambda, thresh_gamma));
    return rcpp_result_gen;
END_RCPP
}
// getThresholds
Eigen::MatrixXd getThresholds(const Eigen::MatrixXd thresh_mm, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma, const int thresh_no_cov, const double thresh_start, const int thresh_1_exp);
RcppExport SEXP _hopit_getThresholds(SEXP thresh_mmSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP, SEXP thresh_no_covSEXP, SEXP thresh_startSEXP, SEXP thresh_1_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    rcpp_result_gen = Rcpp::wrap(getThresholds(thresh_mm, thresh_lambda, thresh_gamma, thresh_no_cov, thresh_start, thresh_1_exp));
    return rcpp_result_gen;
END_RCPP
}
// VgetThresholds
Eigen::MatrixXd VgetThresholds(const Eigen::MatrixXd thresh_mm, const Eigen::VectorXd thresh_lambda, const Eigen::VectorXd thresh_gamma, const int thresh_no_cov, const double thresh_start);
RcppExport SEXP _hopit_VgetThresholds(SEXP thresh_mmSEXP, SEXP thresh_lambdaSEXP, SEXP thresh_gammaSEXP, SEXP thresh_no_covSEXP, SEXP thresh_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_lambda(thresh_lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type thresh_gamma(thresh_gammaSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    rcpp_result_gen = Rcpp::wrap(VgetThresholds(thresh_mm, thresh_lambda, thresh_gamma, thresh_no_cov, thresh_start));
    return rcpp_result_gen;
END_RCPP
}
// LLFunc
double LLFunc(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::VectorXi parcount, const int hasdisp, const int link, const int thresh_no_cov, const int negative, const int use_weights, const Eigen::VectorXd weights, const double thresh_start, const int thresh_1_exp, const double out_val, const int method);
RcppExport SEXP _hopit_LLFunc(SEXP parametersSEXP, SEXP yiSEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP parcountSEXP, SEXP hasdispSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP weightsSEXP, SEXP thresh_startSEXP, SEXP thresh_1_expSEXP, SEXP out_valSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type hasdisp(hasdispSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    Rcpp::traits::input_parameter< const double >::type out_val(out_valSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(LLFunc(parameters, yi, reg_mm, thresh_mm, parcount, hasdisp, link, thresh_no_cov, negative, use_weights, weights, thresh_start, thresh_1_exp, out_val, method));
    return rcpp_result_gen;
END_RCPP
}
// LLFuncIndv
Eigen::MatrixXd LLFuncIndv(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::VectorXi parcount, const int hasdisp, const int link, const int thresh_no_cov, const int negative, const int use_weights, const double thresh_start, const int thresh_1_exp, const Eigen::VectorXd weights, const int method);
RcppExport SEXP _hopit_LLFuncIndv(SEXP parametersSEXP, SEXP yiSEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP parcountSEXP, SEXP hasdispSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP thresh_startSEXP, SEXP thresh_1_expSEXP, SEXP weightsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type hasdisp(hasdispSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(LLFuncIndv(parameters, yi, reg_mm, thresh_mm, parcount, hasdisp, link, thresh_no_cov, negative, use_weights, thresh_start, thresh_1_exp, weights, method));
    return rcpp_result_gen;
END_RCPP
}
// LLGradFunc
Eigen::MatrixXd LLGradFunc(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd YYY1, const Eigen::MatrixXd YYY2, const Eigen::MatrixXd YYY3, const Eigen::MatrixXd YYY4, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::MatrixXd thresh_extd, const Eigen::VectorXi parcount, const int hasdisp, const int link, const int thresh_no_cov, const int negative, const int use_weights, const double thresh_start, const int thresh_1_exp, const Eigen::VectorXd weights, const int method);
RcppExport SEXP _hopit_LLGradFunc(SEXP parametersSEXP, SEXP yiSEXP, SEXP YYY1SEXP, SEXP YYY2SEXP, SEXP YYY3SEXP, SEXP YYY4SEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP thresh_extdSEXP, SEXP parcountSEXP, SEXP hasdispSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP thresh_startSEXP, SEXP thresh_1_expSEXP, SEXP weightsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY1(YYY1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY2(YYY2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY3(YYY3SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY4(YYY4SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_extd(thresh_extdSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type hasdisp(hasdispSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(LLGradFunc(parameters, yi, YYY1, YYY2, YYY3, YYY4, reg_mm, thresh_mm, thresh_extd, parcount, hasdisp, link, thresh_no_cov, negative, use_weights, thresh_start, thresh_1_exp, weights, method));
    return rcpp_result_gen;
END_RCPP
}
// LLGradFuncIndv
Eigen::MatrixXd LLGradFuncIndv(const Eigen::Map<Eigen::VectorXd> parameters, const Eigen::VectorXi yi, const Eigen::MatrixXd YYY1, const Eigen::MatrixXd YYY2, const Eigen::MatrixXd YYY3, const Eigen::MatrixXd YYY4, const Eigen::MatrixXd reg_mm, const Eigen::MatrixXd thresh_mm, const Eigen::MatrixXd thresh_extd, const Eigen::VectorXi parcount, const int hasdisp, const int link, const int thresh_no_cov, const int negative, const int use_weights, const double thresh_start, const int thresh_1_exp, const Eigen::VectorXd weights, const int method);
RcppExport SEXP _hopit_LLGradFuncIndv(SEXP parametersSEXP, SEXP yiSEXP, SEXP YYY1SEXP, SEXP YYY2SEXP, SEXP YYY3SEXP, SEXP YYY4SEXP, SEXP reg_mmSEXP, SEXP thresh_mmSEXP, SEXP thresh_extdSEXP, SEXP parcountSEXP, SEXP hasdispSEXP, SEXP linkSEXP, SEXP thresh_no_covSEXP, SEXP negativeSEXP, SEXP use_weightsSEXP, SEXP thresh_startSEXP, SEXP thresh_1_expSEXP, SEXP weightsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY1(YYY1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY2(YYY2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY3(YYY3SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type YYY4(YYY4SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type reg_mm(reg_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_mm(thresh_mmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type thresh_extd(thresh_extdSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type parcount(parcountSEXP);
    Rcpp::traits::input_parameter< const int >::type hasdisp(hasdispSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_no_cov(thresh_no_covSEXP);
    Rcpp::traits::input_parameter< const int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< const int >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh_start(thresh_startSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh_1_exp(thresh_1_expSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(LLGradFuncIndv(parameters, yi, YYY1, YYY2, YYY3, YYY4, reg_mm, thresh_mm, thresh_extd, parcount, hasdisp, link, thresh_no_cov, negative, use_weights, thresh_start, thresh_1_exp, weights, method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hopit_pstdnorm", (DL_FUNC) &_hopit_pstdnorm, 1},
    {"_hopit_dstdnorm", (DL_FUNC) &_hopit_dstdnorm, 1},
    {"_hopit_dstdlogis", (DL_FUNC) &_hopit_dstdlogis, 1},
    {"_hopit_pstdlogis", (DL_FUNC) &_hopit_pstdlogis, 1},
    {"_hopit_colpath", (DL_FUNC) &_hopit_colpath, 3},
    {"_hopit_glm2hopit", (DL_FUNC) &_hopit_glm2hopit, 4},
    {"_hopit_ind_reg_thresh", (DL_FUNC) &_hopit_ind_reg_thresh, 3},
    {"_hopit_getThresholds", (DL_FUNC) &_hopit_getThresholds, 6},
    {"_hopit_VgetThresholds", (DL_FUNC) &_hopit_VgetThresholds, 5},
    {"_hopit_LLFunc", (DL_FUNC) &_hopit_LLFunc, 15},
    {"_hopit_LLFuncIndv", (DL_FUNC) &_hopit_LLFuncIndv, 14},
    {"_hopit_LLGradFunc", (DL_FUNC) &_hopit_LLGradFunc, 19},
    {"_hopit_LLGradFuncIndv", (DL_FUNC) &_hopit_LLGradFuncIndv, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_hopit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
