% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gotm.r
\name{factor.mat.gotm}
\alias{factor.mat.gotm}
\title{#' Simulation model output
#'
#' Given a data and model parameters simulate the categorical response.
#'
#' @export
#' @author Maciej J. Danko <\email{danko@demogr.mpg.de}> <\email{maciej.danko@gmail.com}>
gotm_simulate <- function(reg.formula,
                        thresh.formula = as.formula('~1'),
                        J,
                        reg.params,
                        th.lambda,
                        th.gamma,
                        offset = 0L,
                        fn = exp,
                        method = 'classic',
                        add.epsilon = TRUE,
                        data){
  response <- as.character(reg.formula[[2L]])
  reg.mat <- model.matrix(reg.formula[-2L], data = data)[,-1L]
  thr.mat <- model.matrix(thresh.formula, data = data)[,-1L]
  data$y <- gotm_Latent(reg.params = reg.params, mod.mat = reg.mat, N = dim(data)[1L], offset = offset)
  if (add.epsilon) data$y <- data$y + rnorm(dim(data)[1L])
  thresh.alpha <- gotm_Threshold(thresh.lambda = th.lambda, thresh.gamma = th.gamma, model = NULL,
                              N = dim(data)[1L], J = J, offset = offset,
                              mod.mat = model.matrix(thresh.formula, data = data)[,-1L], method = method,
                              use.cov = length(thr.mat) > 0L, list(thresh.fun = fn))
  data <- cbind(data, as.factor(colSums(sapply(1L : dim(data)[1L], function(k) (data$y[k]>thresh.alpha[k,])))))
  colnames(data)[dim(data)[2L]] <- response
  params <- c(reg.params, th.lambda, th.gamma)
  list(data = data, a = thresh.alpha, par = params)
}}
\usage{
factor.mat.gotm(object, by.formula = object$thresh.formula)
}
\description{
#' Simulation model output
#'
#' Given a data and model parameters simulate the categorical response.
#'
#' @export
#' @author Maciej J. Danko <\email{danko@demogr.mpg.de}> <\email{maciej.danko@gmail.com}>
gotm_simulate <- function(reg.formula,
                        thresh.formula = as.formula('~1'),
                        J,
                        reg.params,
                        th.lambda,
                        th.gamma,
                        offset = 0L,
                        fn = exp,
                        method = 'classic',
                        add.epsilon = TRUE,
                        data){
  response <- as.character(reg.formula[[2L]])
  reg.mat <- model.matrix(reg.formula[-2L], data = data)[,-1L]
  thr.mat <- model.matrix(thresh.formula, data = data)[,-1L]
  data$y <- gotm_Latent(reg.params = reg.params, mod.mat = reg.mat, N = dim(data)[1L], offset = offset)
  if (add.epsilon) data$y <- data$y + rnorm(dim(data)[1L])
  thresh.alpha <- gotm_Threshold(thresh.lambda = th.lambda, thresh.gamma = th.gamma, model = NULL,
                              N = dim(data)[1L], J = J, offset = offset,
                              mod.mat = model.matrix(thresh.formula, data = data)[,-1L], method = method,
                              use.cov = length(thr.mat) > 0L, list(thresh.fun = fn))
  data <- cbind(data, as.factor(colSums(sapply(1L : dim(data)[1L], function(k) (data$y[k]>thresh.alpha[k,])))))
  colnames(data)[dim(data)[2L]] <- response
  params <- c(reg.params, th.lambda, th.gamma)
  list(data = data, a = thresh.alpha, par = params)
}
}

